# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 6 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"
           export PROJECT_DIRECTORY="$(pwd)"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
              export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi

          # TEMPORARY
          cp ${PROJECT_DIRECTORY}/.evergreen/download-mongodb.sh ${DRIVERS_TOOLS}/.evergreen

          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  # "upload build":
  #   # Compress and upload the entire build directory
  #   - command: archive.targz_pack
  #     params:
  #       # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
  #       target: "${build_id}.tar.gz"
  #       source_dir: ${PROJECT_DIRECTORY}/
  #       include:
  #         - "./**"
  #   - command: s3.put
  #     params:
  #       aws_key: ${aws_key}
  #       aws_secret: ${aws_secret}
  #       local_file: ${build_id}.tar.gz
  #       # Example: /mciuploads/${UPLOAD_BUCKET}/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
  #       remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
  #       bucket: mciuploads
  #       permissions: public-read
  #       content_type: ${content_type|application/x-gzip}

  # "fetch build":
  #   - command: shell.exec
  #     params:
  #       continue_on_err: true
  #       script: "set -o xtrace && rm -rf ${PROJECT_DIRECTORY}"
  #   - command: s3.get
  #     params:
  #       aws_key: ${aws_key}
  #       aws_secret: ${aws_secret}
  #       remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${BUILD_NAME}/${build_id}.tar.gz
  #       bucket: mciuploads
  #       local_file: build.tar.gz
  #   - command: shell.exec
  #     params:
  #       continue_on_err: true
  #       # EVG-1105: Use s3.get extract_to: ./
  #       script: "set -o xtrace && cd .. && rm -rf ${PROJECT_DIRECTORY} && mkdir ${PROJECT_DIRECTORY}/ && tar xf build.tar.gz -C ${PROJECT_DIRECTORY}/"

  "exec compile script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          [ -f ${PROJECT_DIRECTORY}/${file} ] && BUILDTOOL="${buildtool}" sh ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          [ -f ${PROJECT_DIRECTORY}/${file} ] && sh ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} STORAGE_ENGINE=${STORAGE_ENGINE} sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "stop mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          sh ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          export ${COMPILE_ENV|}
          AUTH=${AUTH} SSL=${SSL} MONGODB_URI="${MONGODB_URI}" sh ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh

  "cleanup":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          file="${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh"
          # Don't use ${file} syntax here because evergreen treats it as an empty expansion.
          [ -f "$file" ] && sh $file || echo "$file not available, skipping"

pre:
  - func: "fetch source"
  - func: "prepare resources"
  - func: "fix absolute paths"
  - func: "make files executable"
  - func: "install dependencies"

post:
  - func: "stop mongo-orchestration"
  - func: "cleanup"

tasks:
# Standard test tasks {{{

    - name: "test-2.6-standalone"
      tags: ["2.6", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-2.6-replica_set"
      tags: ["2.6", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-2.6-sharded_cluster"
      tags: ["2.6", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.0-standalone"
      tags: ["3.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.0-replica_set"
      tags: ["3.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.0-sharded_cluster"
      tags: ["3.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.2-standalone"
      tags: ["3.2", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.2-replica_set"
      tags: ["3.2", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.2-sharded_cluster"
      tags: ["3.2", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.4-standalone"
      tags: ["3.4", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.4-replica_set"
      tags: ["3.4", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.4-sharded_cluster"
      tags: ["3.4", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"
    - name: "test-3.6-standalone"
      tags: ["3.6", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.6-replica_set"
      tags: ["3.6", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.6-sharded_cluster"
      tags: ["3.6", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-standalone"
      tags: ["latest", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-latest-replica_set"
      tags: ["latest", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-latest-sharded_cluster"
      tags: ["latest", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

# }}}


axes:
  - id: versions
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
      - id: "3.6"
        display_name: "3.6"
        variables:
           VERSION: "3.6"
      - id: "3.4"
        display_name: "3.4"
        variables:
           VERSION: "3.4"
      - id: "3.2"
        display_name: "3.2"
        variables:
           VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
           VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
           VERSION: "2.6"

  - id: os-fully-featured
    display_name: OS
    values:
      - id: macos-1012
        display_name: "macOS 10.12"
        run_on: macos-1012
        variables:
          COMPILE_ENV: DEVELOPER_DIR=/Applications/Xcode9.2.app

  - id: topology
    display_name: Topology
    values:
      - id: standalone
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: replicaset
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: sharded-cluster
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: auth
    display_name: Authentication
    values:
      - id: auth
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: noauth
        display_name: NoAuth
        variables:
           AUTH: "noauth"
  - id: ssl
    display_name: SSL
    values:
      - id: ssl
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: nossl
        display_name: NoSSL
        variables:
           SSL: "nossl"
  - id: storage-engine
    display_name: Storage
    values:
      - id: mmapv1
        display_name: MMAPv1
        variables:
           STORAGE_ENGINE: "mmapv1"
      - id: wiredtiger
        display_name: WiredTiger
        variables:
           STORAGE_ENGINE: "wiredtiger"
      - id: inmemory
        display_name: InMemory
        variables:
           STORAGE_ENGINE: "inmemory"


buildvariants:
- matrix_name: "tests-all"
#  matrix_spec: {"os-fully-featured": "*", auth: "*", ssl: "*" } // reenable when SSL support is added to the driver
  matrix_spec: {"os-fully-featured": "*", auth: "noauth", ssl: "nossl" }
  display_name: "${os-fully-featured} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"
     - name: "test-3.0-replica_set"
     - name: "test-3.0-sharded_cluster"
     - name: "test-3.0-standalone"
     - name: "test-2.6-replica_set"
     - name: "test-2.6-sharded_cluster"
     - name: "test-2.6-standalone"

